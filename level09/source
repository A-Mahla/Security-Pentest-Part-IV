# include <stdio.h>
# include <stdlib.h>
# include <string.h>
# include <sys/ptrace.h>


int get_unum( void ) {

	int	*n;

	fflush(stdout);
	scanf("%u", n);
	return *n;

}


int read_number( char *buffer ) {

	int	index;

	printf( " Index: " );
	index = get_unum();
	printf( " Number at data[%u] is %u\n", index, buffer[index << 2] );

}


int store_number( char *buffer ) {

	int	number = 0; // ebp-0x10
	int	index = 0; // ebp-0xc
	int	eax;

	printf( " Number: " );
	number = get_unum();
	printf( " Index: " );
	index = get_unum();
// ==== this snippet is equivalent to 'eax %= 3' ====
	eax = (2863311531 * index) >> 33; // (0xaaaaaaab * index) >> 33
	eax *= 3;
	eax -= eax;
// ===============================================
	if ( !eax ) {
		puts(" *** ERROR! ***");
		puts("   This index is reserved for wil!");
		puts(" *** ERROR! ***");
		return 1;
	}
	buffer[index << 2] = number;
	return 0;
}


int main( int ac, char **av, char **env ) {

	char	buffer[100]; // exp+0x24
	char	esp_1[4] = {0}; // esp+0x1b4
	char	esp_2[20] = {0}; // esp+0x1b8 - exp+0x1c8

	while ( *(++av) )
		memset( *av, 0, strlen(*av) );
	while ( *(++env) )
		memset( *env, 0, strlen(*env) );
	puts(
		"----------------------------------------------------\n"
		"  Welcome to wil's crappy number storage service!   \n"
		"----------------------------------------------------\n"
		" Commands:                                         \n"
		"                                                \n"
		"    store - store a number into the data storage    \n"
		"    read  - read a number from the data storage     \n"
		"    quit  - exit the program                     \n"
		"                        \n"
		"----------------------------------------------------\n"
		"   wil has reserved some storage :>                 \n"
		"                        \n"
		"----------------------------------------------------\n"
	);
	while ( 1 ) {
		printf( "Input command: " );
		*esp_1 = 1;
		fgets( esp_2, 20, stdin );
		esp_2[strlen(esp_2) - 1] = '\0';
		printf("%s", esp_2);
		if ( strcmp("store", esp_2) == 0 )
			esp_2[0] = store_number( buffer );
		else if ( strcmp("read", esp_2) == 0 )
			esp_2[0] = read_number( buffer );
		else if ( strcmp("quit", esp_2) == 0 )
			break;
		if ( !esp_2[0] )
			printf(" Completed %s command successfully\n", esp_2);
		else
			printf(" Failed to do %s command\n", esp_2);
		for ( int i = 0; i < 32; i++ )
			esp_2[i] = 0;
	}
	return 0;
}
